const http = require('http');
const qrcode = require('qrcode-terminal');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const { isRestrictedTime } = require('./utils');
require('dotenv').config();
const path = require('path');
const fs = require('fs');
const cron = require('node-cron');
// ID do grupo espec√≠fico (definido como vari√°vel de ambiente)



// Configura√ß√£o do cliente WhatsApp Web
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "example"
    })
});

client.initialize();


/* client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
}); */


// Exibir QR code no terminal para autentica√ß√£o no WhatsApp
client.on('qr', qr => {
const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qr)}`;
console.log(`Scan the QR code at this URL: ${qrCodeUrl}`);
});




/* const audioFile1 = 'musica1.mp3'
const audioFile2 = 'musica2.mp3'
const audioFile3 = 'musica3.mp3' */

const specificGroupId = process.env.GROUP_ID;

const forbiddenWords = ['#palavrao', 'porra', 'poha', 'caralho', 'cacete', 'merda', 'bosta', 'puta', 'caraleo', 'buceta', 'desgra√ßa', 'peranha', 'puto', 'bo√ßal', 'taquepariu', 'safada']

const userInfractions = {};

client.on('ready', async () => {
    console.log('Bot iniciado!');

    /* cron.schedule('0 6 * * *', async () => {
        try {
            const chat = await client.getChatById('ID_DO_GRUPO'); // Substitua pelo ID do grupo
            await chat.setMessagesAdminsOnly(false); // Abre o grupo para todos
            await chat.sendMessage("üîì O grupo est√° aberto! Todos os participantes podem enviar mensagens.");
            console.log("Grupo aberto √†s 6:00");
        } catch (error) {
            console.error("Erro ao abrir o grupo:", error);
        }
    });

    // Agendar para fechar o grupo √†s 23:00
    cron.schedule('0 0 * * *', async () => {
        try {
            const chat = await client.getChatById('ID_DO_GRUPO'); // Substitua pelo ID do grupo
            await chat.setMessagesAdminsOnly(true); // Fecha o grupo para todos, permitindo apenas administradores
            await chat.sendMessage("üîí O grupo foi fechado! Apenas administradores podem enviar mensagens.");
            console.log("Grupo fechado √†s 23:00");
        } catch (error) {
            console.error("Erro ao fechar o grupo:", error);
        }
    }); */
});

const allowedUserIds = [
    '5511976047647@c.us',  // Substitua por IDs reais
    '5519996132496@c.us'  // Substitua por IDs reais
    // Adicione mais IDs conforme necess√°rio
];

function clearCache() {
    for (let key in userInfractions) {
        delete userInfractions[key];
    }
    console.log('Cache de infra√ß√µes foi limpo.');
}

client.on('message', async msg => {
    const chat = await msg.getChat();


    if (chat.isGroup && chat.id._serialized === specificGroupId) {

        // Converte a mensagem para min√∫sculas para compara√ß√£o
        const messageText = msg.body.toLowerCase();


        if (msg.body === "Sentido soldado!") {
            const authorId = msg.author || msg.from;

            console.log(msg.mentionedIds.includes(client.info.wid._serialized))
            if (allowedUserIds.includes(authorId)) {
                try {
                    // Aqui voc√™ pode adicionar a l√≥gica para verificar se o autor √© um administrador

                    await msg.reply("√Å sua disposi√ß√£o! ü´°");
                    console.log(`Mensagem enviada para o autor: ${authorId}`);
                } catch (error) {
                    // Captura o erro e exibe no console
                    console.error(`Erro ao enviar a mensagem para o autor ${authorId}:`, error);
                    await chat.sendMessage("Houve um erro ao processar seu comando. Tente novamente mais tarde.");
                }

                return;
            }

        }

        // Resposta ao comando Apresente-se
        if (msg.body === "Apresente-se!") {
            const authorId = msg.author || msg.from;
            if (allowedUserIds.includes(authorId)) {
                try {

                    await chat.sendMessage("Me chamo SENTINELA e sou um ü§ñ de intelig√™ncia artificial,\n\nMinha miss√£o √© vigiar o grupo e garantir a ordem na aus√™ncia dos administradores...\n\n *Ezequiel 33:7*\n`Filho do homem, eu fiz de voc√™ uma sentinela para a na√ß√£o de Israel; por isso, ou√ßa a minha palavra e advirta-os em meu nome.` üìñ\n\nDigite */ajuda* e confira os comandos dispon√≠veis.");

                } catch (error) {
                    console.error(`Erro ao enviar o √°udio:`, error);
                }


                return;
            }
            // Caminho completo do √°udio

        }




        if (msg.body === '/limpar') {
            const authorId = msg.author || msg.from;


            // Verifica se o autor √© um administrador      

            if (allowedUserIds.includes(authorId)) {
                clearCache(); // Limpa o cache de infra√ß√µes
                await msg.reply('Cache e dados de infra√ß√µes foram limpos com sucesso pelos administradores.');
            } else {
                await msg.reply('Apenas administradores podem usar este comando.');
            }
            return;
        }


        // Verifica se a mensagem cont√©m alguma palavra proibida
        if (forbiddenWords.some(word => typeof messageText === 'string' && messageText.includes(word))) {
            let senderId = msg.author || msg.from;

            // Verifica se `senderId` √© uma string e o formata corretamente se necess√°rio
            if (typeof senderId === 'string' && !senderId.includes('@c.us')) {
                senderId = `${senderId.split('@')[0]}@c.us`;
            }

            // Inicializa o contador de infra√ß√µes do usu√°rio se n√£o existir
            if (!userInfractions[senderId]) {
                userInfractions[senderId] = 0;
            }

            // Incrementa o n√∫mero de infra√ß√µes do usu√°rio
            userInfractions[senderId] += 1;

            console.log(`Usu√°rio ${senderId} cometeu ${userInfractions[senderId]} infra√ß√£o(√µes).`);

            if (userInfractions[senderId] >= 3) {
                try {
                    if (chat && typeof chat.removeParticipants === 'function') {
                        // Remove o usu√°rio do grupo
                        await chat.removeParticipants([senderId]);
                        console.log(`O usu√°rio ${senderId} foi removido por atingir o limite de infra√ß√µes.`);

                        // Envia a mensagem de aviso no grupo
                        await chat.sendMessage(`O usu√°rio ${senderId.split('@')[0]} foi removido por atingir o limite de infra√ß√µes.`);

                        // Reseta o contador de infra√ß√µes do usu√°rio ap√≥s a remo√ß√£o
                        delete userInfractions[senderId];
                    }
                } catch (error) {
                    console.error(`Erro ao tentar remover o usu√°rio ${senderId}:`, error);
                }
            } else {
                // Respostas aleat√≥rias
                const responses = [
                    `@${senderId.split('@')[0]}\n\n‚ùó Palavr√µes n√£o s√£o permitidos, pare ou poder√° ou ser√° banido automaticamente‚ùó\n\n*Ef√©sios 4:29*\n"N√£o saia da vossa boca nenhuma palavra suja, mas unicamente a que for boa para edifica√ß√£o, conforme a necessidade, e assim transmita gra√ßa aos que a ouvem."` + `\n\n*${3 - userInfractions[senderId]} chance(s)*`,
                    `@${senderId.split('@')[0]}\n\n‚ùó Palavr√µes n√£o s√£o permitidos, pare ou poder√° ou ser√° banido automaticamente‚ùó\n\n*Tiago 1:26*\n"Se algu√©m cuida ser religioso e n√£o refreia a sua l√≠ngua, antes engana o seu cora√ß√£o, a sua religi√£o √© v√£."` + `\n\n*${3 - userInfractions[senderId]} chance(s)*`,
                    `@${senderId.split('@')[0]}\n\n‚ùó Palavr√µes n√£o s√£o permitidos, pare ou poder√° ou ser√° banido automaticamente‚ùó\n\n*Colossenses 3:8*\n"Mas agora deixai tamb√©m v√≥s todas estas coisas: ira, indigna√ß√£o, mal√≠cia, blasf√™mias e palavras desonestas da vossa boca."` + `\n\n*${3 - userInfractions[senderId]} chance(s)*`
                ];

                // Seleciona uma resposta aleat√≥ria
                const randomResponse = responses[Math.floor(Math.random() * responses.length)];

                try {
                    // Envia a mensagem de aviso ao usu√°rio
                    await chat.sendMessage(randomResponse, {
                        mentions: [senderId]
                    });
                } catch (error) {
                    console.error('Erro ao enviar mensagem de aviso:', error);
                }
            }
        }





    }

    if (
        msg.body === '/ajuda' &&
        msg.from === specificGroupId
    ) {



        try {

            await msg.reply("*/louvor*\nMostra a lista de louvores para download");
        } catch (error) {
            console.error(`Erro ao executar o comando:`, error);
        }
    }

    if (
        msg.body === '/admsComandos' &&
        msg.from === specificGroupId
    ) {
        if (allowedUserIds.includes(authorId)) {

            try {

                await chat.sendMessage(`*/limpar*\nlimpa o cache do bot e reinicia a contagem de banimento do grupo`);
            } catch (error) {
                console.error(`Erro ao executar o comando:`, error);
            }
        }


    }

    ////////////////////////////////////////////
   

    if (
        msg.body === '/louvor' &&
        msg.from === specificGroupId
    ) {



        try {

            await msg.reply("*/louvor1*\nFilho Meu - Talles Roberto\n\n*/louvor2*\nFogo em Teus Olhos - Minist√©rio ir\n\n*/louvor3*\nPsalm 125 - 'M√∫sica dos Templarios'");
        } catch (error) {
            console.error(`Erro ao executar o comando:`, error);
        }
    }



    if (chat.isGroup && chat.id._serialized === specificGroupId) {
        let audioPath;
        let captions;

        if (msg.body === '/louvor1') {
            audioPath = path.join(__dirname, 'musicas', 'musica1.mp3');
            captions = 'Filho Meu - Talles Roberto';
        } else if (msg.body === '/louvor2') {
            audioPath = path.join(__dirname, 'musicas', 'musica2.mp3');
            captions = 'Fogo em Teus Olhos - Minist√©rio Ir';
        } else if (msg.body === '/louvor3') {
            audioPath = path.join(__dirname, 'musicas', 'musica3.mp3');
            captions = 'Psalm 125 - "M√∫sica dos Templ√°rios"';
        }

        if (audioPath) {
            // Verifica se o arquivo de √°udio existe
            if (!fs.existsSync(audioPath)) {
                console.error('Arquivo de √°udio n√£o encontrado:', audioPath);
                return;
            }

            try {
                // Cria a m√≠dia a partir do arquivo de √°udio
                const media = MessageMedia.fromFilePath(audioPath);
                // Envia a m√∫sica no grupo
                await msg.reply(media);
                await chat.sendMessage(captions)
                console.log(`√Åudio enviado com sucesso: ${captions}`);
            } catch (error) {
                console.error(`Erro ao enviar o √°udio:`, error);
            }
        }
    }









    if (msg.from === specificGroupId) {
        // Checa se √© hor√°rio restrito
        if (isRestrictedTime()) {
            const chat = await client.getChatById(specificGroupId);
            const participants = await chat.participants;

            // Verifica se o remetente √© um administrador
            const isAdmin = participants.some(participant => participant.id._serialized === msg.from && participant.isAdmin);

            // Se n√£o for administrador, avise a pessoa para dormir
            if (!isAdmin) {
                await client.sendMessage(msg.from, 'Ei, j√° √© tarde! Que tal voc√™ ir dormir?  üò¥\n\n*Salmos 4:*\n`Em paz me deitarei e dormirei, pois s√≥ tu, Senhor, me fazes habitar em seguran√ßa.`');
                console.log(`Aviso enviado para ${msg.from} para ir dormir.`);
                return; // Sai da fun√ß√£o para evitar processar a mensagem mais
            }
        }



    }



});

client.on('group_join', async (notification) => {
    const chat = await notification.getChat();

    // Verifica se o evento aconteceu no grupo espec√≠fico
    if (chat.isGroup && chat.id._serialized === specificGroupId) {
        const participantId = notification.id.participant;  // ID do novo participante

        // Envia a mensagem de boas-vindas no grupo espec√≠fico com o ID do participante na lista de mentions
        chat.sendMessage(`@${participantId.split('@')[0]}\n\nBem-vindo(a) a comunidade!\n\nAqui praticamos jejuns coletivos, mandamos vers√≠culos, devocionais, respondemos d√∫vidas, ora√ß√µes e damos conselhos para o avan√ßo do reino de Deus üëë\n\nPor favor leia as regras na descri√ß√£o do grupo ‚ùó\n\n*` + "1Corintios 16:23*\n`A gra√ßa do Senhor Jesus seja com voc√™s.`", {
            mentions: [participantId]  // Usando o ID do participante como string
        });
    }
});

// Inicializa o cliente WhatsApp Web


// Configura o servidor HTTP para o Render
const PORT = process.env.PORT || 4000;
http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('WhatsApp Bot est√° em execu√ß√£o');
}).listen(PORT, () => {
    console.log(`Servidor HTTP rodando na porta ${PORT}`);
});
